#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Coloretto.Services.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Coloretta")]
	public partial class ColorettaDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccessLog(AccessLog instance);
    partial void UpdateAccessLog(AccessLog instance);
    partial void DeleteAccessLog(AccessLog instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertGamePlayer(GamePlayer instance);
    partial void UpdateGamePlayer(GamePlayer instance);
    partial void DeleteGamePlayer(GamePlayer instance);
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertSetting(Setting instance);
    partial void UpdateSetting(Setting instance);
    partial void DeleteSetting(Setting instance);
    #endregion
		
		public ColorettaDataContext() : 
				base(global::Coloretto.Services.Properties.Settings.Default.ColorettaConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public ColorettaDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ColorettaDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ColorettaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ColorettaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AccessLog> AccessLogs
		{
			get
			{
				return this.GetTable<AccessLog>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<GamePlayer> GamePlayers
		{
			get
			{
				return this.GetTable<GamePlayer>();
			}
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<Setting> Settings
		{
			get
			{
				return this.GetTable<Setting>();
			}
		}
	}
	
	[Table(Name="dbo.AccessLog")]
	public partial class AccessLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Username;
		
		private System.DateTime _LoginTime;
		
		private bool _Success;
		
		private string _Origination;
		
		private System.Nullable<System.DateTimeOffset> _Duration;
		
		private string _AccessPoint;
		
		private System.Guid _AccessLogId;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnLoginTimeChanging(System.DateTime value);
    partial void OnLoginTimeChanged();
    partial void OnSuccessChanging(bool value);
    partial void OnSuccessChanged();
    partial void OnOriginationChanging(string value);
    partial void OnOriginationChanged();
    partial void OnDurationChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnDurationChanged();
    partial void OnAccessPointChanging(string value);
    partial void OnAccessPointChanged();
    partial void OnAccessLogIdChanging(System.Guid value);
    partial void OnAccessLogIdChanged();
    #endregion
		
		public AccessLog()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Column(Storage="_LoginTime", DbType="DateTime NOT NULL")]
		public System.DateTime LoginTime
		{
			get
			{
				return this._LoginTime;
			}
			set
			{
				if ((this._LoginTime != value))
				{
					this.OnLoginTimeChanging(value);
					this.SendPropertyChanging();
					this._LoginTime = value;
					this.SendPropertyChanged("LoginTime");
					this.OnLoginTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Success", DbType="Bit NOT NULL")]
		public bool Success
		{
			get
			{
				return this._Success;
			}
			set
			{
				if ((this._Success != value))
				{
					this.OnSuccessChanging(value);
					this.SendPropertyChanging();
					this._Success = value;
					this.SendPropertyChanged("Success");
					this.OnSuccessChanged();
				}
			}
		}
		
		[Column(Storage="_Origination", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Origination
		{
			get
			{
				return this._Origination;
			}
			set
			{
				if ((this._Origination != value))
				{
					this.OnOriginationChanging(value);
					this.SendPropertyChanging();
					this._Origination = value;
					this.SendPropertyChanged("Origination");
					this.OnOriginationChanged();
				}
			}
		}
		
		[Column(Storage="_Duration", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[Column(Storage="_AccessPoint", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string AccessPoint
		{
			get
			{
				return this._AccessPoint;
			}
			set
			{
				if ((this._AccessPoint != value))
				{
					this.OnAccessPointChanging(value);
					this.SendPropertyChanging();
					this._AccessPoint = value;
					this.SendPropertyChanged("AccessPoint");
					this.OnAccessPointChanged();
				}
			}
		}
		
		[Column(Storage="_AccessLogId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AccessLogId
		{
			get
			{
				return this._AccessLogId;
			}
			set
			{
				if ((this._AccessLogId != value))
				{
					this.OnAccessLogIdChanging(value);
					this.SendPropertyChanging();
					this._AccessLogId = value;
					this.SendPropertyChanged("AccessLogId");
					this.OnAccessLogIdChanged();
				}
			}
		}
		
		[Association(Name="User_AccessLog", Storage="_User", ThisKey="Username", OtherKey="Username", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.AccessLogs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.AccessLogs.Add(this);
						this._Username = value.Username;
					}
					else
					{
						this._Username = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DisplayName;
		
		private string _Username;
		
		private string _Password;
		
		private System.DateTime _Created;
		
		private string _Email;
		
		private bool _Newsletter;
		
		private System.Data.Linq.Binary _RV;
		
		private System.Nullable<System.DateTime> _Deleted;
		
		private EntitySet<AccessLog> _AccessLogs;
		
		private EntitySet<GamePlayer> _GamePlayers;
		
		private EntitySet<Game> _Games;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnNewsletterChanging(bool value);
    partial void OnNewsletterChanged();
    partial void OnRVChanging(System.Data.Linq.Binary value);
    partial void OnRVChanged();
    partial void OnDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedChanged();
    #endregion
		
		public User()
		{
			this._AccessLogs = new EntitySet<AccessLog>(new Action<AccessLog>(this.attach_AccessLogs), new Action<AccessLog>(this.detach_AccessLogs));
			this._GamePlayers = new EntitySet<GamePlayer>(new Action<GamePlayer>(this.attach_GamePlayers), new Action<GamePlayer>(this.detach_GamePlayers));
			this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
			OnCreated();
		}
		
		[Column(Storage="_DisplayName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[Column(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Newsletter", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Newsletter
		{
			get
			{
				return this._Newsletter;
			}
			set
			{
				if ((this._Newsletter != value))
				{
					this.OnNewsletterChanging(value);
					this.SendPropertyChanging();
					this._Newsletter = value;
					this.SendPropertyChanged("Newsletter");
					this.OnNewsletterChanged();
				}
			}
		}
		
		[Column(Storage="_RV", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary RV
		{
			get
			{
				return this._RV;
			}
			set
			{
				if ((this._RV != value))
				{
					this.OnRVChanging(value);
					this.SendPropertyChanging();
					this._RV = value;
					this.SendPropertyChanged("RV");
					this.OnRVChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Association(Name="User_AccessLog", Storage="_AccessLogs", ThisKey="Username", OtherKey="Username")]
		public EntitySet<AccessLog> AccessLogs
		{
			get
			{
				return this._AccessLogs;
			}
			set
			{
				this._AccessLogs.Assign(value);
			}
		}
		
		[Association(Name="User_GamePlayer", Storage="_GamePlayers", ThisKey="Username", OtherKey="Username")]
		public EntitySet<GamePlayer> GamePlayers
		{
			get
			{
				return this._GamePlayers;
			}
			set
			{
				this._GamePlayers.Assign(value);
			}
		}
		
		[Association(Name="User_Game", Storage="_Games", ThisKey="Username", OtherKey="owner")]
		public EntitySet<Game> Games
		{
			get
			{
				return this._Games;
			}
			set
			{
				this._Games.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccessLogs(AccessLog entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_AccessLogs(AccessLog entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_GamePlayers(GamePlayer entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_GamePlayers(GamePlayer entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[Table(Name="dbo.GamePlayers")]
	public partial class GamePlayer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GameId;
		
		private string _Username;
		
		private short _Order;
		
		private EntityRef<User> _User;
		
		private EntityRef<Game> _Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameIdChanging(System.Guid value);
    partial void OnGameIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnOrderChanging(short value);
    partial void OnOrderChanged();
    #endregion
		
		public GamePlayer()
		{
			this._User = default(EntityRef<User>);
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[Column(Storage="_GameId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[Column(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Column(Name="[Order]", Storage="_Order", DbType="SmallInt NOT NULL")]
		public short Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[Association(Name="User_GamePlayer", Storage="_User", ThisKey="Username", OtherKey="Username", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.GamePlayers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.GamePlayers.Add(this);
						this._Username = value.Username;
					}
					else
					{
						this._Username = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="Game_GamePlayer", Storage="_Game", ThisKey="GameId", OtherKey="GameId", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.GamePlayers.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.GamePlayers.Add(this);
						this._GameId = value.GameId;
					}
					else
					{
						this._GameId = default(System.Guid);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Games")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GameId;
		
		private string _Status;
		
		private System.DateTime _Start;
		
		private System.Nullable<System.DateTime> _Finish;
		
		private string _owner;
		
		private EntitySet<GamePlayer> _GamePlayers;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameIdChanging(System.Guid value);
    partial void OnGameIdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnStartChanging(System.DateTime value);
    partial void OnStartChanged();
    partial void OnFinishChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishChanged();
    partial void OnownerChanging(string value);
    partial void OnownerChanged();
    #endregion
		
		public Game()
		{
			this._GamePlayers = new EntitySet<GamePlayer>(new Action<GamePlayer>(this.attach_GamePlayers), new Action<GamePlayer>(this.detach_GamePlayers));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_GameId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_Start", DbType="DateTime NOT NULL")]
		public System.DateTime Start
		{
			get
			{
				return this._Start;
			}
			set
			{
				if ((this._Start != value))
				{
					this.OnStartChanging(value);
					this.SendPropertyChanging();
					this._Start = value;
					this.SendPropertyChanged("Start");
					this.OnStartChanged();
				}
			}
		}
		
		[Column(Storage="_Finish", DbType="DateTime")]
		public System.Nullable<System.DateTime> Finish
		{
			get
			{
				return this._Finish;
			}
			set
			{
				if ((this._Finish != value))
				{
					this.OnFinishChanging(value);
					this.SendPropertyChanging();
					this._Finish = value;
					this.SendPropertyChanged("Finish");
					this.OnFinishChanged();
				}
			}
		}
		
		[Column(Storage="_owner", DbType="VarChar(50)")]
		public string owner
		{
			get
			{
				return this._owner;
			}
			set
			{
				if ((this._owner != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnownerChanging(value);
					this.SendPropertyChanging();
					this._owner = value;
					this.SendPropertyChanged("owner");
					this.OnownerChanged();
				}
			}
		}
		
		[Association(Name="Game_GamePlayer", Storage="_GamePlayers", ThisKey="GameId", OtherKey="GameId")]
		public EntitySet<GamePlayer> GamePlayers
		{
			get
			{
				return this._GamePlayers;
			}
			set
			{
				this._GamePlayers.Assign(value);
			}
		}
		
		[Association(Name="User_Game", Storage="_User", ThisKey="owner", OtherKey="Username", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Games.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Games.Add(this);
						this._owner = value.Username;
					}
					else
					{
						this._owner = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GamePlayers(GamePlayer entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_GamePlayers(GamePlayer entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
	
	[Table(Name="dbo.Settings")]
	public partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _Value;
		
		private string _Context;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnContextChanging(string value);
    partial void OnContextChanged();
    #endregion
		
		public Setting()
		{
			OnCreated();
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_Context", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Context
		{
			get
			{
				return this._Context;
			}
			set
			{
				if ((this._Context != value))
				{
					this.OnContextChanging(value);
					this.SendPropertyChanging();
					this._Context = value;
					this.SendPropertyChanged("Context");
					this.OnContextChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
